[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "The Team",
    "section": "",
    "text": "We developed this project for ISSS608 (Visual Analytics and Applications) course of Masters of IT in Business (MITB) in Singapore Management University under the guidance of Dr. Kam Tin Seong, Associate Professor of Information Systems during the Academic Year 2024-25.\nMembers\n\nEe Fook Ming\nNguyen Bao Thu Phuong\nShreya Agarwal"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-G6",
    "section": "",
    "text": "hello"
  },
  {
    "objectID": "Proposal/Proposal.html",
    "href": "Proposal/Proposal.html",
    "title": "Singapore Weather Analytics",
    "section": "",
    "text": "Singapore’s tropical climate, characterized by high temperatures, humidity, and intense rainfall, presents significant environmental and operational challenges across various sectors. Industries such as urban planning, real estate, insurance, agriculture, and infrastructure management require accurate and real-time weather analytics to make data-driven decisions and mitigate climate-related risks.\nHowever, existing weather dashboards offer limited insights, focusing primarily on basic real-time observations without deep analytical capabilities, trend forecasting, or business-context integration. This project aims to address these gaps by developing a comprehensive, standalone weather analytics platform tailored to Singapore’s unique climate conditions.\nAdditionally, the platform will incorporate robust statistical methods, spatial visualizations, and advanced predictive modelling tools. These analytical capabilities will empower businesses, researchers, and policymakers to independently derive actionable insights, thereby enhancing strategic climate resilience decision-making. By balancing specialized climate data provision with generalized applicability, the platform will serve diverse informational needs without being restricted to any specific industry."
  },
  {
    "objectID": "Proposal/Proposal.html#data-wrangling",
    "href": "Proposal/Proposal.html#data-wrangling",
    "title": "Singapore Weather Analytics",
    "section": "5.1 Data Wrangling",
    "text": "5.1 Data Wrangling\n\n5.1.1 Aspatial Data -\n\nData Collection & Merging: Scrape historical weather data from the MSS website for each location, month, and year from 2015 to 2024 and combine individual records into a single CSV file for unified analysis. \nFiltering Locations: Identify and retain only key locations in Singapore with consistent data availability. \nHandling Missing Values: Apply suitable imputation methods such as moving average or interpolation. \nDuplicate Removal: Identify and eliminate any duplicate entries to ensure data integrity. \nData Formatting: Standardize variable names, data types, and ensure proper date-time formats. \nOutlier Detection: Identify potential anomalies in temperature, rainfall, or wind speed that may indicate data inconsistencies. \nData Validation: Cross-check aggregated data against expected trends to confirm accuracy before analysis. \n\n\n\n5.1.2 Geospatial Data -\n\nCoordinate System Validation: Check if the correct EPSG code is assigned to the simple feature dataframe, and assign the correct EPSG code if applicable \nCoordinate System Projection: Transform the sf dataframe from geographic coordinate system to projected coordinate system for futher calculations. \nStandardize Naming Convention: Identify different naming conventions between Weather datafame Location and the Subzone dataframe Planning Area and standardize to common naming. \nData Join: Left join the Subzone planning dataframe with the Weather dataframe to bring in weather related information while keeping the dataframe as simple features."
  },
  {
    "objectID": "Proposal/Proposal.html#analytic-techniques--",
    "href": "Proposal/Proposal.html#analytic-techniques--",
    "title": "Singapore Weather Analytics",
    "section": "2 Analytic Techniques -",
    "text": "2 Analytic Techniques -\n\n2.1 Exploratory Data Analysis\n\n\n2.2 Time Series Analysis and Forecasting\n\n\n2.3 Geo-spatial Analysis"
  },
  {
    "objectID": "Proposal/Proposal.html#analytic-techniques",
    "href": "Proposal/Proposal.html#analytic-techniques",
    "title": "Singapore Weather Analytics",
    "section": "5.2 Analytic Techniques",
    "text": "5.2 Analytic Techniques\n\n5.2.1 Exploratory Data Analysis (EDA) & Comparative Data Analysis (CDA) -\n\nVisualizing Distribution & Trends: Generate histograms, boxplots, and density plots to analyze the distribution of temperature, rainfall, and wind speed over the years. \nComparative Analysis Across Locations & Time Periods: Compare weather patterns between different regions in Singapore and across different seasons. \nCorrelation Analysis: Examine relationships between variables, such as how temperature fluctuations correspond with wind speed or rainfall intensity. \n\n\n\n5.2.2 Time Series Analysis & Forecasting -\n\nTrend & Seasonality Detection: Use rolling averages, visual and seasonal plots to analyze long-term trends and seasonal variations in temperature, rainfall, and wind patterns. \nTime Series Decomposition: Apply statistical techniques like decomposition to separate trends, seasonality, and residuals. \nStatistical Analysis of Weather Patterns: Calculate key metrics such as mean temperature shifts, variance in rainfall, and wind speed fluctuations over time. \nForecasting Future Trends: Utilize models such as ARIMA, Prophet or Exponential Smoothing to project future weather trends and assess potential climate risks. \n\n\n\n5.2.3 Geo-spatial Analysis -\n\nSpatial Pattern Detection: Identifying Clusters in Weather Metrics\n\nIdentifying regions where neighboring locations exhibit consistently high rainfall or elevated temperatures, which may indicate localized climatic effects. \nDetecting spatial dependencies in wind speed, helping to understand airflow patterns across the city. \n\nSpatial Autocorrelation Analysis: Detecting Weather Trends and Anomalies\nSpatial autocorrelation techniques will be used to identify relationships between weather conditions at different locations and assess whether similar values cluster together. We will perform two key analyses: \n\nLocal Indicator of Spatial Association (LISA): Identifies statistically significant clusters or outliers where weather conditions deviate from surrounding locations. \nEmerging Hot Spot Analysis (EHSA): Identify persistent hot spots (regions where temperature or rainfall remains high) and cold spots (regions with consistently low values), highlight locations with shifting weather patterns. \n\nSpatial Interpolation and Geographically Weighted Predictive Modeling for Weather Forecasting:\n\nInterpolate weather conditions at unmeasured locations based on nearby data points using distance weight and Kriging method \nDerive predictive models incorporate both temporal and spatial dependencies using Geographically Weighted Random Forest."
  },
  {
    "objectID": "WebScraping/sma-5day.html",
    "href": "WebScraping/sma-5day.html",
    "title": "Climate Data Imputation using 5-Day SMA",
    "section": "",
    "text": "1 Load Libraries\n\npacman::p_load(tidyverse,dplyr, readr, openxlsx, zoo)\n\n\n\n2 5-Day\n\nlibrary(dplyr)\nlibrary(readr)\nlibrary(openxlsx)\n\n# === Load dataset ===\nclimate &lt;- read_csv(\"data/climate_historical_daily_records/climate_final_2018_2024.csv\")\noriginal &lt;- climate\n\n# === Columns to impute ===\nimpute_cols &lt;- c(\"Daily Rainfall Total (mm)\",\n                 \"Mean Temperature (Celsius)\",\n                 \"Maximum Temperature (Celsius)\",\n                 \"Minimum Temperature (Celsius)\",\n                 \"Mean Wind Speed (km/h)\")\n\n# === Backward SMA-5 for first 4 rows ===\n# === Backward SMA-5 (recursive fill for rows 4 to 1) ===\nfor (i in 4:1) {\n  window &lt;- climate[(i + 1):(i + 5), impute_cols]\n  sma_values &lt;- colMeans(window, na.rm = TRUE) %&gt;% round(1)\n  climate[i, impute_cols] &lt;- as.list(sma_values)\n}\n\n\n# === Forward SMA-5 for all other NAs ===\nfor (col in impute_cols) {\n  na_indices &lt;- which(is.na(climate[[col]]))\n  for (idx in na_indices) {\n    if (idx &gt;= 5) {\n      sma_val &lt;- mean(climate[[col]][(idx - 5):(idx - 1)], na.rm = TRUE) %&gt;% round(1)\n      if (!is.nan(sma_val)) {\n        climate[[col]][idx] &lt;- sma_val\n      }\n    }\n  }\n}\n\n# === Save updated CSV ===\nwrite_csv(climate, \"data/climate_historical_daily_records/climate_final_2018_2024_5-Day.csv\")\n\n# === Prepare Excel with bold + red styling for updated NA values ===\nwb &lt;- createWorkbook()\naddWorksheet(wb, \"Updated_NAs\")\n\n# Create red bold style\nstyle_red_bold &lt;- createStyle(textDecoration = \"bold\", fontColour = \"#FF0000\")\n\n# Write correct header row in row 1\nwriteData(wb, \"Updated_NAs\", as.data.frame(t(colnames(climate))), startRow = 1, colNames = FALSE)\n\n# Write entire dataset starting from row 2\nwriteData(wb, \"Updated_NAs\", climate, startRow = 2, colNames = FALSE)\n\n# Apply red + bold style for every updated NA field\nfor (col_name in impute_cols) {\n  col_idx &lt;- which(names(climate) == col_name)\n  updated_rows &lt;- which(is.na(original[[col_name]]) & !is.na(climate[[col_name]]))\n\n  if (length(updated_rows) &gt; 0) {\n    for (row in updated_rows) {\n      addStyle(wb,\n               sheet = \"Updated_NAs\",\n               style = style_red_bold,\n               rows = row + 1,   # Offset +1 because header is row 1\n               cols = col_idx,\n               gridExpand = FALSE,\n               stack = TRUE)\n    }\n  }\n}\n\n# Save Excel\nsaveWorkbook(wb, \"data/climate_historical_daily_records/NAs_fields_updated_5-Day.xlsx\", overwrite = TRUE)"
  },
  {
    "objectID": "WebScraping/ws.html",
    "href": "WebScraping/ws.html",
    "title": "Web Scraping",
    "section": "",
    "text": "pacman::p_load(httr, readxl, dplyr, readr)\n\n\nstation_records &lt;- read_excel(\"data/Station_Records.xlsx\")\n\n# Obtain a list of station codes\nstation_codes &lt;- station_records$`code`\nstation_type &lt;- station_records$`Station_Type`\n\nprint(station_codes)\n\n [1] \"S104\" \"S105\" \"S109\" \"S86\"  \"S63\"  \"S120\" \"S55\"  \"S64\"  \"S90\"  \"S92\" \n[11] \"S61\"  \"S24\"  \"S114\" \"S121\" \"S11\"  \"S50\"  \"S118\" \"S107\" \"S39\"  \"S101\"\n[21] \"S44\"  \"S117\" \"S33\"  \"S31\"  \"S71\"  \"S122\" \"S66\"  \"S112\" \"S08\"  \"S07\" \n[31] \"S40\"  \"S108\" \"S113\" \"S111\" \"S119\" \"S116\" \"S29\"  \"S94\"  \"S06\"  \"S106\"\n[41] \"S81\"  \"S77\"  \"S25\"  \"S102\" \"S80\"  \"S60\"  \"S36\"  \"S110\" \"S84\"  \"S79\" \n[51] \"S43\"  \"S78\"  \"S72\"  \"S23\"  \"S88\"  \"S89\"  \"S115\" \"S82\"  \"S35\"  \"S69\" \n[61] \"S46\"  \"S123\" \"S91\" \n\n\n\nprint(station_type)\n\n [1] \"Full AWS Station\" \"Closed Station\"   \"Full AWS Station\" \"Closed Station\"  \n [5] \"Closed Station\"   \"Rainfall Station\" \"Closed Station\"   \"Rainfall Station\"\n [9] \"Rainfall Station\" \"Rainfall Station\" \"Closed Station\"   \"Full AWS Station\"\n[13] \"Rainfall Station\" \"Full AWS Station\" \"Closed Station\"   \"Full AWS Station\"\n[17] \"Closed Station\"   \"Full AWS Station\" \"Closed Station\"   \"Closed Station\"  \n[21] \"Full AWS Station\" \"Full AWS Station\" \"Rainfall Station\" \"Closed Station\"  \n[25] \"Rainfall Station\" \"Closed Station\"   \"Rainfall Station\" \"Rainfall Station\"\n[29] \"Rainfall Station\" \"Rainfall Station\" \"Rainfall Station\" \"Full AWS Station\"\n[33] \"Rainfall Station\" \"Full AWS Station\" \"Rainfall Station\" \"Full AWS Station\"\n[37] \"Rainfall Station\" \"Rainfall Station\" \"Full AWS Station\" \"Full AWS Station\"\n[41] \"Rainfall Station\" \"Rainfall Station\" \"Full AWS Station\" \"Full AWS Station\"\n[45] \"Full AWS Station\" \"Full AWS Station\" \"Rainfall Station\" \"Closed Station\"  \n[49] \"Rainfall Station\" \"Rainfall Station\" \"Full AWS Station\" \"Rainfall Station\"\n[53] \"Closed Station\"   \"Full AWS Station\" \"Rainfall Station\" \"Rainfall Station\"\n[57] \"Full AWS Station\" \"Closed Station\"   \"Closed Station\"   \"Closed Station\"  \n[61] \"Closed Station\"   \"Closed Station\"   \"Closed Station\"  \n\n\nThe code chunk retrieves station codes and their corresponding types. These codes form part of a text string used to construct hyperlinks, which retrieve data directly from the weather website. There are three station types:\nFull AWS station: collects weather data on rainfall, temperature, and wind. Rainfall station: collects rainfall data only. Closed station: a station that is no longer operational. These station identifiers are useful for data filtering, analysis, and visualization based on specific station characteristics.\n\nlibrary(httr)\nlibrary(readr)\n\n# Set base URL template and save file path\nbase_url_template &lt;- \"http://www.weather.gov.sg/files/dailydata/DAILYDATA_%s_%d%s.csv\"\nsave_file &lt;- \"data/climate_historical_daily_records/Climate_Data_2015_2024_v4.csv\"\ndir.create(dirname(save_file), recursive = TRUE, showWarnings = FALSE)\n\n# Define expected column names (preserve exact spacing)\ncolumn_names &lt;- c(\n  \"Station\", \"Year\", \"Month\", \"Day\", \n  \"Daily Rainfall Total (mm)\", \"Highest 30 min Rainfall (mm)\", \n  \"Highest 60 min Rainfall (mm)\", \"Highest 120 min Rainfall (mm)\", \n  \"Mean Temperature (C)\", \"Maximum Temperature (C)\", \n  \"Minimum Temperature (C)\", \"Mean Wind Speed (km/h)\", \n  \"Max Wind Speed (km/h)\"\n)\n\n# Ensure CSV file has proper headers only if it does not exist\nif (!file.exists(save_file)) {\n  write.table(data.frame(matrix(ncol = length(column_names), nrow = 0, dimnames = list(NULL, column_names))),\n              save_file, sep = \",\", row.names = FALSE, col.names = TRUE, quote = FALSE)\n}\n\n# Function to download and append data\ndownload_and_append &lt;- function(station_code, year, month) {\n  month_str &lt;- sprintf(\"%02d\", month)  # Format month as \"01\", \"02\", etc.\n  file_url &lt;- sprintf(base_url_template, station_code, year, month_str)\n\n  response &lt;- tryCatch({\n    GET(file_url)\n  }, error = function(e) {\n    message(sprintf(\"Error fetching: %s\", file_url))\n    return(NULL)\n  })\n\n  if (!is.null(response) && status_code(response) == 200) {\n    # Read CSV content without modifying column names\n    csv_data &lt;- tryCatch({\n      read_csv(content(response, \"raw\"), show_col_types = FALSE, col_names = FALSE, skip = 1, check.names = FALSE)\n    }, error = function(e) {\n      message(sprintf(\"Failed to read CSV: %s\", file_url))\n      return(NULL)\n    })\n\n    # Ensure correct column alignment and remove empty rows\n    if (!is.null(csv_data) && ncol(csv_data) == length(column_names)) {\n      colnames(csv_data) &lt;- column_names  # Assign exact column names\n\n      csv_data &lt;- csv_data[rowSums(is.na(csv_data) | csv_data == \"\") &lt; ncol(csv_data), ]  # Remove empty rows\n      \n      if (nrow(csv_data) &gt; 0) {\n        write.table(csv_data, save_file, sep = \",\", row.names = FALSE, col.names = FALSE, append = TRUE, quote = FALSE)\n        message(sprintf(\"Appended data for %s - %d-%s\", station_code, year, month_str))\n      } else {\n        message(sprintf(\"Skipping empty dataset: %s\", file_url))\n      }\n    } else {\n      message(sprintf(\"Data format mismatch: %s\", file_url))\n    }\n  } else {\n    message(sprintf(\"Failed to download: %s\", file_url))\n  }\n}\n\n# Loop through each station code and fetch data\nfor (station_code in station_codes) {\n  for (year in 2015:2024) {\n    for (month in 1:12) {\n      download_and_append(station_code, year, month)\n    }\n  }\n}\n\nprint(\"Download process completed for all stations.\")\n\nThe code chunk systematically downloads daily climate data from Singapore’s weather service for multiple weather stations, covering years 2015 through 2024. It constructs URLs dynamically based on station codes, year, and month, retrieves CSV files, filters out incomplete or invalid entries, and then consolidates valid data into a single CSV file (Climate_Data_2018\\5_2024.csv). The primary intention is to compile a structured, comprehensive dataset of climate measurements for subsequent data processing, analysis or visualization tasks."
  },
  {
    "objectID": "Shiny-App/WeatherWiseSG-EFM/landing_page.html#exploratory-data-analysis-eda-comparative-data-analysis-cda",
    "href": "Shiny-App/WeatherWiseSG-EFM/landing_page.html#exploratory-data-analysis-eda-comparative-data-analysis-cda",
    "title": "Singapore Weather Dashboard",
    "section": "Exploratory Data Analysis (EDA) & Comparative Data Analysis (CDA)",
    "text": "Exploratory Data Analysis (EDA) & Comparative Data Analysis (CDA)\nThis section focuses on analyzing the distribution and trends of weather variables such as temperature, rainfall, and wind speed through visual tools like histograms and density plots. It also facilitates comparative analysis across different regions in Singapore and time periods, allowing users to observe seasonal differences. Additionally, it explores the relationships between variables, such as the correlation between temperature changes and rainfall or wind speed."
  },
  {
    "objectID": "Shiny-App/WeatherWiseSG-EFM/landing_page.html#time-series-analysis-forecasting",
    "href": "Shiny-App/WeatherWiseSG-EFM/landing_page.html#time-series-analysis-forecasting",
    "title": "Singapore Weather Dashboard",
    "section": "Time Series Analysis & Forecasting",
    "text": "Time Series Analysis & Forecasting\nThis section identifies long-term and seasonal patterns in weather data using rolling averages and seasonal plots. It includes decomposition techniques to separate trend, seasonality, and residuals, enabling a deeper understanding of climatic dynamics. Users can statistically analyze weather fluctuations and forecast future trends using models like ARIMA, Prophet, or Exponential Smoothing to assess future climate risks and variations."
  },
  {
    "objectID": "Shiny-App/WeatherWiseSG-EFM/landing_page.html#geo-spatial-analysis",
    "href": "Shiny-App/WeatherWiseSG-EFM/landing_page.html#geo-spatial-analysis",
    "title": "Singapore Weather Dashboard",
    "section": "Geo-spatial Analysis",
    "text": "Geo-spatial Analysis\nThis module detects spatial patterns and dependencies in weather metrics across Singapore. It identifies clusters of high or low values in temperature, rainfall, or wind speed, which may indicate localized climatic phenomena. Spatial autocorrelation methods are utilized to detect significant anomalies or hot-spots. Additionally, spatial interpolation and geographically weighted predictive models are used to forecast weather conditions at unmeasured locations, integrating both distance-based and machine learning approaches."
  }
]