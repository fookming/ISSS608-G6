---
title: "Climate Data Imputation using 5-Day/14-day SMA"
author: "Ee Fook Ming"
date: "23 March 2025" 
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
  warning: false
---

```{r}

pacman::p_load(tidyverse,dplyr, readr, openxlsx, zoo)

```

# 5-day

```{r}

library(dplyr)
library(readr)
library(openxlsx)

# === Load the dataset ===
climate <- read_csv("data/climate_historical_daily_records/climate_final_2018_2024.csv")
original <- climate

# Columns to impute
impute_cols <- c("Daily Rainfall Total (mm)",
                 "Mean Temperature (Celsius)",
                 "Maximum Temperature (Celsius)",
                 "Minimum Temperature (Celsius)",
                 "Mean Wind Speed (km/h)")

# === Backward SMA for first NA rows ===
first_valid_idx <- which(rowSums(is.na(climate[impute_cols])) == 0)[1]

if (first_valid_idx >= 5) {
  backward_window <- climate[first_valid_idx:(first_valid_idx + 4), impute_cols]
  backward_sma <- summarise_all(backward_window, ~ round(mean(., na.rm = TRUE), 1))
  
  climate[1:(first_valid_idx - 1), impute_cols] <- backward_sma[rep(1, first_valid_idx - 1), ]
}

# === Forward SMA for remaining NAs ===
for (col in impute_cols) {
  na_indices <- which(is.na(climate[[col]]))
  for (idx in na_indices) {
    if (idx >= 5) {
      sma_val <- round(mean(climate[[col]][(idx - 5):(idx - 1)], na.rm = TRUE), 1)
      if (!is.nan(sma_val)) {
        climate[[col]][idx] <- sma_val
      }
    }
  }
}

# === Save cleaned CSV ===
write_csv(climate, "data/climate_historical_daily_records/climate_final_2018_2024_5days.csv")

# === Prepare Excel with bold & red updated fields ===
wb <- createWorkbook()
addWorksheet(wb, "Updated_NAs")

# Red bold style
style_red_bold <- createStyle(textDecoration = "bold", fontColour = "#FF0000")

# Write full data (after header in row 2)
writeData(wb, sheet = "Updated_NAs", climate, startRow = 2, colNames = FALSE)
writeData(wb, sheet = "Updated_NAs", colnames(climate), startRow = 1)

# Bold and highlight cells updated from NA
for (col in impute_cols) {
  col_idx <- which(names(climate) == col)
  updated_rows <- which(is.na(original[[col]]) & !is.na(climate[[col]]))
  for (row in updated_rows) {
    addStyle(wb, sheet = "Updated_NAs", style_red_bold,
             rows = row + 1, cols = col_idx, gridExpand = TRUE)
  }
}

# Save Excel
saveWorkbook(wb, "data/climate_historical_daily_records/NAs_fields_updated_5days.xlsx", overwrite = TRUE)


```

# 14-day

\

```{r}

library(dplyr)
library(readr)
library(openxlsx)

# === Load the dataset ===
climate <- read_csv("data/climate_historical_daily_records/climate_final_2018_2024.csv")
original <- climate

# === Columns to impute ===
impute_cols <- c("Daily Rainfall Total (mm)",
                 "Mean Temperature (Celsius)",
                 "Maximum Temperature (Celsius)",
                 "Minimum Temperature (Celsius)",
                 "Mean Wind Speed (km/h)")

# === Backward 14-day SMA for initial NA rows ===
first_valid_idx <- which(rowSums(is.na(climate[impute_cols])) == 0)[1]

if (!is.na(first_valid_idx) && (nrow(climate) >= first_valid_idx + 13)) {
  # Get next 14 complete rows
  backward_window <- climate[first_valid_idx:(first_valid_idx + 13), impute_cols]

  # Compute backward 14-day SMA properly
  backward_sma <- backward_window %>%
    summarise(across(everything(), ~ round(mean(., na.rm = TRUE), 1)))

  # Fill rows before the first valid record
  if (first_valid_idx > 1) {
    num_na_rows <- first_valid_idx - 1
    climate[1:num_na_rows, impute_cols] <- backward_sma[rep(1, num_na_rows), ]
  }
}

# === Forward 14-day SMA for remaining NAs ===
for (col in impute_cols) {
  na_indices <- which(is.na(climate[[col]]))
  for (idx in na_indices) {
    if (idx >= 14) {
      sma_val <- round(mean(climate[[col]][(idx - 14):(idx - 1)], na.rm = TRUE), 1)
      if (!is.nan(sma_val)) {
        climate[[col]][idx] <- sma_val
      }
    }
  }
}

# === Save cleaned dataset as CSV ===
write_csv(climate, "data/climate_historical_daily_records/climate_final_2018_2024_14days.csv")

# === Create Excel with red bold formatting for updated NAs ===
wb <- createWorkbook()
addWorksheet(wb, "Updated_NAs")

# Red bold style
style_red_bold <- createStyle(textDecoration = "bold", fontColour = "#FF0000")

# Write full data and header
writeData(wb, sheet = "Updated_NAs", climate, startRow = 2, colNames = FALSE)
writeData(wb, sheet = "Updated_NAs", colnames(climate), startRow = 1)

# Bold and red updated cells
for (col in impute_cols) {
  col_idx <- which(names(climate) == col)
  updated_rows <- which(is.na(original[[col]]) & !is.na(climate[[col]]))
  for (row in updated_rows) {
    addStyle(wb, "Updated_NAs", style_red_bold,
             rows = row + 1, cols = col_idx, gridExpand = TRUE)
  }
}

# Save Excel file
saveWorkbook(wb, "data/climate_historical_daily_records/NAs_fields_updated_14days.xlsx", overwrite = TRUE)

```
