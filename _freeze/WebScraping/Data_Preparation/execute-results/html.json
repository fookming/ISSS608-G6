{
  "hash": "8077fe38cb1416b53ee8f1774cd37621",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Preparation\"\nauthor: \"Ee Fook Ming, Nguyen Bao Thu Phuong & Shreya Agarwal\"\ndate: \"18 March 2025\" \ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n\n\n# Overview\n\nThis section outlines the data preparation process, including the exclusion of stations with extensive missing data and the imputation of missing values for selected stations, ensuring data quality for subsequent visual analytics in our project.\n\n## The Data\n\n-   Scraped weather data from Meteorological Service Singapore stored in `Climate_Data_2015_2024.csv` .\n-   Weather Station records from [weather.gov.sg](https://www.weather.gov.sg/wp-content/uploads/2024/08/Station_Records.pdf), stored in `Station_Records.csv` .\n\n# Install R packages\n\nThe below code chunk uses `p_load()` to load and install the required packages into R environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, readr, openxlsx, zoo)\n```\n:::\n\n\n\n# Data Import and Preparation\n\n## Daily Weather Records\n\nFirst we read in the daily weather records scraped from [weather.gov.sg](https://www.weather.gov.sg/climate-historical-daily/) into tibble dataframe `climate_raw` using `read_csv()` .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate_raw = read_csv(\"data/climate_historical_daily_records/Climate_Data_2015_2024.csv\")\n```\n:::\n\n\n\nNext we check if the scraped data contains any duplicate.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- climate_raw %>% \n  group_by_all() %>% \n  filter(n()>1) %>% \n  ungroup()\n  \nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 13\n# ℹ 13 variables: Station <chr>, Year <dbl>, Month <dbl>, Day <dbl>,\n#   Daily Rainfall Total (mm) <dbl>, Highest 30 min Rainfall (mm) <dbl>,\n#   Highest 60 min Rainfall (mm) <dbl>, Highest 120 min Rainfall (mm) <dbl>,\n#   Mean Temperature (Celsius) <dbl>, Maximum Temperature (Celsius) <dbl>,\n#   Minimum Temperature (Celsius) <dbl>, Mean Wind Speed (km/h) <dbl>,\n#   Max Wind Speed (km/h) <dbl>\n```\n\n\n:::\n:::\n\n\n\nThe output shows there is no duplicates.\n\nThe below code chunk uses `summary()` to have an overview of the scraped dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(climate_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Station               Year          Month             Day       \n Length:192483      Min.   :2015   Min.   : 1.000   Min.   : 1.00  \n Class :character   1st Qu.:2017   1st Qu.: 3.000   1st Qu.: 8.00  \n Mode  :character   Median :2019   Median : 6.000   Median :16.00  \n                    Mean   :2019   Mean   : 6.485   Mean   :15.73  \n                    3rd Qu.:2022   3rd Qu.: 9.000   3rd Qu.:23.00  \n                    Max.   :2024   Max.   :12.000   Max.   :31.00  \n                                                                   \n Daily Rainfall Total (mm) Highest 30 min Rainfall (mm)\n Min.   :  0.000           Min.   : 0.000              \n 1st Qu.:  0.000           1st Qu.: 0.000              \n Median :  0.200           Median : 0.200              \n Mean   :  6.672           Mean   : 3.968              \n 3rd Qu.:  6.600           3rd Qu.: 4.200              \n Max.   :247.200           Max.   :71.800              \n NA's   :4921              NA's   :12754               \n Highest 60 min Rainfall (mm) Highest 120 min Rainfall (mm)\n Min.   :  0.000              Min.   :  0.000              \n 1st Qu.:  0.000              1st Qu.:  0.000              \n Median :  0.200              Median :  0.200              \n Mean   :  4.939              Mean   :  5.639              \n 3rd Qu.:  4.800              3rd Qu.:  5.600              \n Max.   :103.100              Max.   :148.600              \n NA's   :12811                NA's   :12808                \n Mean Temperature (Celsius) Maximum Temperature (Celsius)\n Min.   :22.20              Min.   :22.80                \n 1st Qu.:27.30              1st Qu.:30.90                \n Median :28.10              Median :32.00                \n Mean   :28.05              Mean   :31.85                \n 3rd Qu.:28.90              3rd Qu.:33.00                \n Max.   :31.70              Max.   :38.00                \n NA's   :128350             NA's   :124311               \n Minimum Temperature (Celsius) Mean Wind Speed (km/h) Max Wind Speed (km/h)\n Min.   : 0.00                 Min.   : 0.40          Min.   :  3.70       \n 1st Qu.:24.30                 1st Qu.: 5.70          1st Qu.: 26.60       \n Median :25.30                 Median : 7.60          Median : 31.50       \n Mean   :25.39                 Mean   : 8.48          Mean   : 32.92       \n 3rd Qu.:26.40                 3rd Qu.:10.40          3rd Qu.: 37.40       \n Max.   :34.70                 Max.   :66.60          Max.   :138.60       \n NA's   :124342                NA's   :125214         NA's   :124380       \n```\n\n\n:::\n:::\n\n\n\nThe output shows there are many null values, while the min max range of all weather measurements are in the normal range.\n\n## Weather Station Records\n\nNext we read in the stations details to retrieve station types and coordinates. For our Shiny application, we focus solely on **Full AWS** stations, as they provide comprehensive data across all weather parameters. Other station types, such as Closed Stations and Daily Rainfall Stations (which only record rainfall metrics), are excluded from further analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read station metadata and filter for Full AWS stations\nstation = read_csv(\"data/Station_Records.csv\") |> \n  filter(Station_Type == \"Full AWS Station\")\n```\n:::\n\n\n\nThe below code chunk checks for duplicate.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- station %>%    \n  group_by_all() %>%    \n  filter(n()>1) %>%    \n  ungroup()\n\nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 5\n# ℹ 5 variables: Station <chr>, code <chr>, Lat <dbl>, Long <dbl>,\n#   Station_Type <chr>\n```\n\n\n:::\n:::\n\n\n\nThe output shows there is no duplicate.\n\n# Data Wrangling\n\n## Join Station with Climate dataframe\n\nFirst we join `station` with `climate_raw` dataframe using `inner_join()` to include only records from active Full AWS Station.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join to retain only Full AWS station records\nclimate = inner_join(station,climate_raw, by = \"Station\")\n```\n:::\n\n\n\nThe below code chunk checks for duplicates in the joined dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- climate %>%    \n  group_by_all() %>%    \n  filter(n()>1) %>%    \n  ungroup()    \n\nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 17\n# ℹ 17 variables: Station <chr>, code <chr>, Lat <dbl>, Long <dbl>,\n#   Station_Type <chr>, Year <dbl>, Month <dbl>, Day <dbl>,\n#   Daily Rainfall Total (mm) <dbl>, Highest 30 min Rainfall (mm) <dbl>,\n#   Highest 60 min Rainfall (mm) <dbl>, Highest 120 min Rainfall (mm) <dbl>,\n#   Mean Temperature (Celsius) <dbl>, Maximum Temperature (Celsius) <dbl>,\n#   Minimum Temperature (Celsius) <dbl>, Mean Wind Speed (km/h) <dbl>,\n#   Max Wind Speed (km/h) <dbl>\n```\n\n\n:::\n:::\n\n\n\nThe output shows there is no duplicate in `climate` dataframe.\n\nNext we filter climate dataset for only relevant columns for our weather analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select relevant columns\nclimate <- climate |> \n  select(Station, Station_Type, Year, Month, Day,\n         `Daily Rainfall Total (mm)`,\n         `Mean Temperature (Celsius)`,\n         `Maximum Temperature (Celsius)`,\n         `Minimum Temperature (Celsius)`,\n         `Mean Wind Speed (km/h)`)\n```\n:::\n\n\n\nThe final `climate` dataframe consists of **10 columns**, including the **5 key weather parameters** selected for further analysis.\n\n## Missing Rainfall records\n\nNext we check for null records from the key parameter `Daily Rainfall Total (mm)`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count missing values for each Station, Year, and Month \nmissing_rain_counts <- climate %>%   \n  group_by(Station, Year, Month) %>%   \n  summarise(\n    `Missing Daily Rainfall Total` = sum(is.na(`Daily Rainfall Total (mm)`))   ) %>%  \n    # Exclude rows where all missing counts are zero\n  filter(`Missing Daily Rainfall Total` > 0) |>\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count the number of months per station where missing days exceed 15 \nmissing_rain_summary <- missing_rain_counts %>%   \n  filter(`Missing Daily Rainfall Total` >= 15) %>%   \n  group_by(Station, Year) %>%   \n  summarise(Count_Months = n()) %>%   \n  arrange(Year)|>   \n  pivot_wider(names_from = Year, values_from = Count_Months) |>   \n  ungroup()\n```\n:::\n\n\n\nThe output reveals 7 stations with ≥15 days of missing Daily Rainfall Total (mm) in more than one month over the years. Semakau Island station has a full year of missing data in 2019, while 2015–2017 period shows a high prevalence of missing data across stations.\n\n## Missing Temperature Records\n\nWe carry out the same check for `Mean Temperature (Celsius)`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count missing values for each Station, Year, and Month \nmissing_temp_counts <- climate %>%   \n  group_by(Station, Year, Month) %>%   \n  summarise(     \n    `Missing Mean Temperature` = sum(is.na(`Mean Temperature (Celsius)`))) %>%   \n  # Exclude rows where all missing counts are zero\n  filter(`Missing Mean Temperature` > 0) |>\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count the number of months per station where missing days exceed 15 \nmissing_temp_summary <- missing_temp_counts %>%    \n  filter(`Missing Mean Temperature` >= 15) %>%   \n  group_by(Station, Year) %>%   \n  summarise(Count_Months = n()) %>%   \n  arrange(Year)|>   \n  pivot_wider(names_from = Year, values_from = Count_Months) |>   \n  ungroup()\n```\n:::\n\n\n\nThe same 7 stations with significant missing `Daily Rainfall Total (mm)` are also among the 15 stations with missing `Mean Temperature (Celsius)` data, where more than 15 days are missing for certain months. Some stations have full years of missing data, with 2015–2017 particularly shows a high prevalence of missing data across stations.\n\n## Exclude stations with many missing records\n\nGiven the extensive missing data from 2015–2017, we will retain data from 2018 onwards. For each station, we will count the total number of months with more than 15 days missing data across the years and flag stations with more than 3 missing months. Those stations will be excluded from the main `climate` dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter_invalid_stations <- function(summary_df, from_year = 2018) {\n  # Get only year columns ≥ from_year\n  year_cols <- summary_df |> \n    select(where(is.numeric)) |> \n    select(matches(\"^[0-9]{4}$\")) |> \n    select(as.character(from_year):last_col()) |> \n    colnames()\n\n  summary_df |> \n    rowwise() |> \n    mutate(total_flagged_months = sum(c_across(all_of(year_cols)), na.rm = TRUE)) |> \n    filter(total_flagged_months >= 3) |> \n    pull(Station)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get invalid stations (stations to exclude)\ninvalid_rain_stations <- filter_invalid_stations(missing_rain_summary)\ninvalid_temp_stations <- filter_invalid_stations(missing_temp_summary)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine all stations to exclude\nstations_to_exclude <- union(invalid_rain_stations, invalid_temp_stations) \n```\n:::\n\n\n\nThe above 5 stations will be excluded. The below code chunk applies this filter on the `climate` dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now filter the full dataset to only include stations from 2018-2024\nclimate_final <- climate |> \n  filter(!(Station %in% stations_to_exclude), Year >= 2018, Year <= 2024)\n\nsummary(climate_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Station          Station_Type            Year          Month       \n Length:38186       Length:38186       Min.   :2018   Min.   : 1.000  \n Class :character   Class :character   1st Qu.:2019   1st Qu.: 4.000  \n Mode  :character   Mode  :character   Median :2021   Median : 7.000  \n                                       Mean   :2021   Mean   : 6.529  \n                                       3rd Qu.:2023   3rd Qu.:10.000  \n                                       Max.   :2024   Max.   :12.000  \n                                                                      \n      Day        Daily Rainfall Total (mm) Mean Temperature (Celsius)\n Min.   : 1.00   Min.   :  0.000           Min.   :22.20             \n 1st Qu.: 8.00   1st Qu.:  0.000           1st Qu.:27.30             \n Median :16.00   Median :  0.200           Median :28.10             \n Mean   :15.73   Mean   :  6.868           Mean   :28.05             \n 3rd Qu.:23.00   3rd Qu.:  6.600           3rd Qu.:28.90             \n Max.   :31.00   Max.   :210.600           Max.   :31.70             \n                 NA's   :260               NA's   :571               \n Maximum Temperature (Celsius) Minimum Temperature (Celsius)\n Min.   :22.80                 Min.   :20.40                \n 1st Qu.:30.80                 1st Qu.:24.40                \n Median :32.00                 Median :25.40                \n Mean   :31.79                 Mean   :25.46                \n 3rd Qu.:33.00                 3rd Qu.:26.50                \n Max.   :38.00                 Max.   :29.70                \n NA's   :483                   NA's   :487                  \n Mean Wind Speed (km/h)\n Min.   : 0.400        \n 1st Qu.: 5.600        \n Median : 7.600        \n Mean   : 8.474        \n 3rd Qu.:10.400        \n Max.   :31.300        \n NA's   :1701          \n```\n\n\n:::\n:::\n\n\n\n`climate_final` is the filtered dataset obtained. Below is the list of the final 15 AWS stations that we will be focusing our analysis on.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate_final %>% \n  distinct(Station) %>% \n  arrange(Station) %>% \n  mutate(Station_ID = row_number())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 2\n   Station               Station_ID\n   <chr>                      <int>\n 1 Admiralty                      1\n 2 Ang Mo Kio                     2\n 3 Changi                         3\n 4 Choa Chu Kang (South)          4\n 5 Clementi                       5\n 6 East Coast Parkway             6\n 7 Jurong (West)                  7\n 8 Jurong Island                  8\n 9 Newton                         9\n10 Pasir Panjang                 10\n11 Paya Lebar                    11\n12 Pulau Ubin                    12\n13 Sentosa Island                13\n14 Tai Seng                      14\n15 Tuas South                    15\n```\n\n\n:::\n:::\n\n\n\n## Replacing Missing Values using SMA 5 days\n\nThe below code chunk counts the number of missing values in each column of `climate_final`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate_final %>% \n  summarise(across(where(is.numeric), ~sum(is.na(.)), .names = \"missing_{.col}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  missing_Year missing_Month missing_Day `missing_Daily Rainfall Total (mm)`\n         <int>         <int>       <int>                               <int>\n1            0             0           0                                 260\n# ℹ 4 more variables: `missing_Mean Temperature (Celsius)` <int>,\n#   `missing_Maximum Temperature (Celsius)` <int>,\n#   `missing_Minimum Temperature (Celsius)` <int>,\n#   `missing_Mean Wind Speed (km/h)` <int>\n```\n\n\n:::\n:::\n\n\n\nThe output reveals multiple missing values across the five weather parameters. To address this, we will first apply a 5-day backward moving average for imputation. However, for cases where this method cannot be applied (e.g., missing values at the beginning of the time series), we will use a 5-day forward moving average as a fallback.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# === Load dataset ===\nclimate <- climate_final\noriginal <- climate\n\n# === Columns to impute ===\nimpute_cols <- c(\"Daily Rainfall Total (mm)\",\n                 \"Mean Temperature (Celsius)\",\n                 \"Maximum Temperature (Celsius)\",\n                 \"Minimum Temperature (Celsius)\",\n                 \"Mean Wind Speed (km/h)\")\n\n# === Backward SMA-5 for first 4 rows ===\n# === Backward SMA-5 (recursive fill for rows 4 to 1) ===\nfor (i in 4:1) {\n  window <- climate[(i + 1):(i + 5), impute_cols]\n  sma_values <- colMeans(window, na.rm = TRUE) %>% round(1)\n  climate[i, impute_cols] <- as.list(sma_values)\n}\n\n\n# === Forward SMA-5 for all other NAs ===\nfor (col in impute_cols) {\n  na_indices <- which(is.na(climate[[col]]))\n  for (idx in na_indices) {\n    if (idx >= 5) {\n      sma_val <- mean(climate[[col]][(idx - 5):(idx - 1)], na.rm = TRUE) %>% round(1)\n      if (!is.nan(sma_val)) {\n        climate[[col]][idx] <- sma_val\n      }\n    }\n  }\n}\n\n# === Save updated CSV ===\nwrite_csv(climate, \"data/climate_historical_daily_records/climate_final_2018_2024.csv\")\n```\n:::\n\n\n\nThe final prepared dataset for our analysis is saved as `climate_final_2018_2024.csv` with no missing data.\n\nThe below code chunk reads the final dataset from `climate_final_2018_2024.csv`for further analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate = read_csv('data/climate_historical_daily_records/climate_final_2018_2024.csv')\n```\n:::\n\n\n\nWe verify the final `climate` dataframe for missing data using below code chunk. The output confirms that all missing values have been successfully imputed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>% \n  summarise(across(where(is.numeric), ~sum(is.na(.)), .names = \"missing_{.col}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  missing_Year missing_Month missing_Day `missing_Daily Rainfall Total (mm)`\n         <int>         <int>       <int>                               <int>\n1            0             0           0                                   0\n# ℹ 4 more variables: `missing_Mean Temperature (Celsius)` <int>,\n#   `missing_Maximum Temperature (Celsius)` <int>,\n#   `missing_Minimum Temperature (Celsius)` <int>,\n#   `missing_Mean Wind Speed (km/h)` <int>\n```\n\n\n:::\n:::\n\n\n\nThe below code chunk provides a summary of the imputed `climate` dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(climate)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Station          Station_Type            Year          Month       \n Length:38186       Length:38186       Min.   :2018   Min.   : 1.000  \n Class :character   Class :character   1st Qu.:2019   1st Qu.: 4.000  \n Mode  :character   Mode  :character   Median :2021   Median : 7.000  \n                                       Mean   :2021   Mean   : 6.529  \n                                       3rd Qu.:2023   3rd Qu.:10.000  \n                                       Max.   :2024   Max.   :12.000  \n      Day        Daily Rainfall Total (mm) Mean Temperature (Celsius)\n Min.   : 1.00   Min.   :  0.000           Min.   :22.20             \n 1st Qu.: 8.00   1st Qu.:  0.000           1st Qu.:27.20             \n Median :16.00   Median :  0.200           Median :28.10             \n Mean   :15.73   Mean   :  6.888           Mean   :28.04             \n 3rd Qu.:23.00   3rd Qu.:  6.600           3rd Qu.:28.90             \n Max.   :31.00   Max.   :210.600           Max.   :31.70             \n Maximum Temperature (Celsius) Minimum Temperature (Celsius)\n Min.   :22.80                 Min.   :20.40                \n 1st Qu.:30.80                 1st Qu.:24.40                \n Median :32.00                 Median :25.40                \n Mean   :31.79                 Mean   :25.46                \n 3rd Qu.:33.00                 3rd Qu.:26.50                \n Max.   :38.00                 Max.   :29.70                \n Mean Wind Speed (km/h)\n Min.   : 0.400        \n 1st Qu.: 5.700        \n Median : 7.600        \n Mean   : 8.605        \n 3rd Qu.:10.600        \n Max.   :31.300        \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}