{
  "hash": "ed8796ac34b99fd9b67c2f0aeb67ab65",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Geospatial Analysis of Singapore Weather Data\"\nauthor: \"Nguyen Bao Thu Phuong\"\ndate: \"18 March 2025\" \ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n\n\n\n\n# Overview\n\nImportance of incorporating geospatial analysis in visual analysis for time series weather data\n\n## The Data\n\n-   Scraped weather data from\n\n-   Weather Station records\n\n-   Singapore Master Plan 2014 Subzone Boundary\n\n# Install R packages\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, DT ,tmap, sf, sfdep, corrplot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThe downloaded binary packages are in\n\t/var/folders/fy/3kpzvcyn6wsb0fc4_vc1ndzw0000gn/T//RtmpVBREmF/downloaded_packages\n```\n\n\n:::\n:::\n\n\n\n\n\n# Data Wrangling\n\n## Data Import and Preparation\n\n### Daily Weather Records\n\nFirst we read in the daily weather records scraped from weather.gov.sg into tibble dataframe `climate_raw` using `read_csv()` .\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate_raw = read_csv(\"WebScraping/data/climate_historical_daily_records/Climate_Data_2015_2024.csv\")\n```\n:::\n\n\n\n\n\n### Weather Station Records\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstation = read_csv(\"WebScraping/data/Station_Records.csv\") |>\n  filter(Station_Type != \"Closed Station\")\n```\n:::\n\n\n\n\n\nCheck duplicate\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- station %>% \n  group_by_all() %>% \n  filter(n()>1) %>% \n  ungroup()\n  \nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 5\n# ℹ 5 variables: Station <chr>, code <chr>, Lat <dbl>, Long <dbl>,\n#   Station_Type <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\n### Master Plan Subzone Boundary\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"Geospatial/data\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/fm/ISSS608-G6/Geospatial/data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\n\n\n## Data Wrangling\n\nFilter daily weather data for active stations only\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate = inner_join(station,climate_raw, by = \"Station\")\n```\n:::\n\n\n\n\n\nCheck duplicate\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- climate %>% \n  group_by_all() %>% \n  filter(n()>1) %>% \n  ungroup()\n  \nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 17\n# ℹ 17 variables: Station <chr>, code <chr>, Lat <dbl>, Long <dbl>,\n#   Station_Type <chr>, Year <dbl>, Month <dbl>, Day <dbl>,\n#   Daily Rainfall Total (mm) <dbl>, Highest 30 min Rainfall (mm) <dbl>,\n#   Highest 60 min Rainfall (mm) <dbl>, Highest 120 min Rainfall (mm) <dbl>,\n#   Mean Temperature (Celsius) <dbl>, Maximum Temperature (Celsius) <dbl>,\n#   Minimum Temperature (Celsius) <dbl>, Mean Wind Speed (km/h) <dbl>,\n#   Max Wind Speed (km/h) <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\nThe output shows there is no duplicate in `climate` dataframe.\n\nNext we select relevant columns for further geospatial analysis\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate = climate |>\n  select(c(Station, Station_Type, Year, Month, Day, `Daily Rainfall Total (mm)`, `Mean Temperature (Celsius)`, `Mean Wind Speed (km/h)`))\n```\n:::\n\n\n\n\n\nSince there are stations that only measure rainfall, we split into two dataframes:\n\n-   `climate_rain`: include all stations and only measurement on `Daily Rainfall Total (mm)`\n\n-   `climate_temperature_wind`: include only full AWS stations and only measurements on `Mean Temperature (Celsius)` and `Mean Wind Speed (km/h)`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate_rain = climate |>\n  select(c(Station, Station_Type, Year, Month, Day, `Daily Rainfall Total (mm)`))\nsummary(climate_rain)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Station          Station_Type            Year          Month       \n Length:152229      Length:152229      Min.   :2015   Min.   : 1.000  \n Class :character   Class :character   1st Qu.:2017   1st Qu.: 4.000  \n Mode  :character   Mode  :character   Median :2019   Median : 7.000  \n                                       Mean   :2019   Mean   : 6.508  \n                                       3rd Qu.:2022   3rd Qu.:10.000  \n                                       Max.   :2024   Max.   :12.000  \n                                                                      \n      Day        Daily Rainfall Total (mm)\n Min.   : 1.00   Min.   :  0.00           \n 1st Qu.: 8.00   1st Qu.:  0.00           \n Median :16.00   Median :  0.20           \n Mean   :15.73   Mean   :  6.71           \n 3rd Qu.:23.00   3rd Qu.:  6.60           \n Max.   :31.00   Max.   :247.20           \n                 NA's   :3382             \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate_temperature_wind = climate |>\n  select(c(Station, Station_Type, Year, Month, Day, `Mean Temperature (Celsius)`, `Mean Wind Speed (km/h)`)) |>\n  filter(Station_Type == \"Full AWS Station\")\n\nsummary(climate_temperature_wind)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Station          Station_Type            Year          Month       \n Length:71156       Length:71156       Min.   :2015   Min.   : 1.000  \n Class :character   Class :character   1st Qu.:2017   1st Qu.: 4.000  \n Mode  :character   Mode  :character   Median :2019   Median : 7.000  \n                                       Mean   :2019   Mean   : 6.519  \n                                       3rd Qu.:2022   3rd Qu.:10.000  \n                                       Max.   :2024   Max.   :12.000  \n                                                                      \n      Day        Mean Temperature (Celsius) Mean Wind Speed (km/h)\n Min.   : 1.00   Min.   :22.20              Min.   : 0.400        \n 1st Qu.: 8.00   1st Qu.:27.30              1st Qu.: 5.800        \n Median :16.00   Median :28.10              Median : 7.600        \n Mean   :15.73   Mean   :28.06              Mean   : 8.592        \n 3rd Qu.:23.00   3rd Qu.:28.90              3rd Qu.:10.400        \n Max.   :31.00   Max.   :31.70              Max.   :66.600        \n                 NA's   :9549               NA's   :6461          \n```\n\n\n:::\n:::\n\n\n\n\n\nThere are many null values in all three measurements, we continue to explore from which stations and year, month those null records come from.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count missing values for each Station, Year, and Month\nmissing_rain_counts <- climate_rain %>%\n  group_by(Station, Year, Month) %>%\n  summarise(\n    `Missing Daily Rainfall Total` = sum(is.na(`Daily Rainfall Total (mm)`))\n  ) %>%\n  # Exclude rows where all missing counts are zero\n  filter(`Missing Daily Rainfall Total` > 0) |>\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count the number of months per station where missing days exceed 15\nmissing_rain_summary <- missing_rain_counts %>%\n  filter(`Missing Daily Rainfall Total` >= 15) %>%\n  group_by(Station, Year) %>%\n  summarise(Count_Months = n()) %>%\n  arrange(Year)|>\n  pivot_wider(names_from = Year, values_from = Count_Months) |>\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count missing values for each Station, Year, and Month\nmissing_temp_counts <- climate_temperature_wind %>%\n  group_by(Station, Year, Month) %>%\n  summarise(\n    `Missing Mean Temperature` = sum(is.na(`Mean Temperature (Celsius)`))) %>%\n  # Exclude rows where all missing counts are zero\n  filter(`Missing Mean Temperature` > 0) |>\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count the number of months per station where missing days exceed 20\nmissing_temp_summary <- missing_temp_counts %>%\n   filter(`Missing Mean Temperature` >= 15) %>%\n  group_by(Station, Year) %>%\n  summarise(Count_Months = n()) %>%\n  arrange(Year)|>\n  pivot_wider(names_from = Year, values_from = Count_Months) |>\n  ungroup()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}